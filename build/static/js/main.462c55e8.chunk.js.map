{"version":3,"sources":["Home/index.js","Payment/constants.js","Payment/index.js","Payment/utils.js","PaymentResult/index.js","Certification/index.js","CertificationResult/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","styled","div","_templateObject","ButtonContainer","_templateObject2","withRouter","_ref","history","react_default","a","createElement","es_button","onClick","push","icon","type","PGS","value","label","METHODS","METHODS_FOR_INICIS","concat","METHODS_FOR_UPLUS","METHODS_FOR_KCP","METHODS_FOR_MOBILIANS","METHODS_FOR_DANAL","METHOD_FOR_CARD","METHOD_FOR_PHONE","METHOD_FOR_VBANK","QUOTAS","QUOTAS_FOR_INICIS_AND_KCP","Item","Option","PaymentAsClass","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","e","preventDefault","form","validateFieldsAndScroll","error","values","pg","pay_method","merchant_uid","name","amount","buyer_name","buyer_tel","buyer_email","escrow","data","card_quota","biz_num","vbank_due","digital","isReactNative","params","userCode","paramsToString","JSON","stringify","window","ReactNativeWebView","postMessage","IMP","init","request_pay","callback","response","query","queryString","onChangePg","methods","getMethods","setState","setFieldsValue","getFieldsValue","handleQuotas","isBizNumRequired","isVbankDueRequired","_getQuotas","method","isQuotaRequired","quotas","getQuotas","ua","mobile","state","quatas","isDigitalRequired","getFieldDecorator","Payment_Wrapper","Header","FormContainer","onSubmit","initialValue","es_select","size","onChange","suffixIcon","map","key","rules","required","message","input","addonBefore","Date","getTime","htmlType","Component","Payment_templateObject","Payment_templateObject2","es_form","_templateObject3","PaymentForm","create","withUserAgent","PaymentResult_templateObject","Container","PaymentResult_templateObject2","colorType","search","location","parse","error_msg","imp_uid","isSuccessed","success","imp_success","getIsSuccessed","iconType","resultType","PaymentResult_Wrapper","theme","Certification_templateObject","Certification_templateObject2","Certification_templateObject3","CertificationForm","Certification_Wrapper","Certification_Header","Certification_FormContainer","phone","min_age","certification","Certification_Item","placeholder","CertificationResult_templateObject","CertificationResult_templateObject2","CertificationResult_Wrapper","CertificationResult_Container","App","react_router_dom","react_router","exact","path","component","Payment","PaymentResult","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.462c55e8.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { Button, Icon } from 'antd';\nimport { withRouter } from 'react-router-dom';\n\nfunction Home({ history }) {\n  return (\n    <Wrapper>\n      <div>\n        <h2>아임포트 테스트</h2>\n        <h4>아임포트 리액트 테스트 화면입니다.</h4>\n        <h4>아래 버튼을 눌러 결제 또는 본인인증 테스트를 진행해주세요.</h4>\n      </div>\n      <div></div>\n      <ButtonContainer>\n        <Button onClick={() => history.push('/payment')}>\n          <Icon type=\"credit-card\" />\n          결제 테스트\n        </Button>\n        <Button onClick={() => history.push('/certification')}>\n          <Icon type=\"user\" />\n          본인인증 테스트\n        </Button>\n      </ButtonContainer>\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n\n  > div {\n    position: absolute;\n    left: 0;\n    right: 0;\n  }\n  > div:first-child {\n    background-color: #344e81;\n    top: 0;\n    bottom: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    > * {\n      color: #fff;\n    }\n\n    h4 {\n      margin: 0;\n      line-height: 1.5;\n    }\n  }\n  > div:nth-child(2) {\n    top: 50%;\n    bottom: 0;\n  }\n`;\n\nconst ButtonContainer = styled.div`\n  position: absolute;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  top: 50%;\n  margin-top: -5rem;\n\n  button {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    height: 10rem;\n    width: 15rem;\n    margin: 0 0.5rem;\n    border: none;\n    box-shadow: 0 0 1rem 0 rgba(0, 0, 0, 0.13);\n    .anticon {\n      margin-bottom: 0.5rem;\n      font-size: 2rem;\n      & + span {\n        margin: 0;\n      }\n    }\n  }\n`;\n\nexport default withRouter(Home);\n","export const PGS = [\n  // {\n  //   value: 'html5_inicis',\n  //   label: '웹 표준 이니시스',\n  // },\n  // {\n  //   value: 'kcp',\n  //   label: 'NHN KCP',\n  // },\n  // {\n  //   value: 'kcp_billing',\n  //   label: 'NHN KCP 정기결제',\n  // },\n  // {\n  //   value: 'uplus',\n  //   label: 'LG 유플러스',\n  // },\n  // {\n  //   value: 'jtnet',\n  //   label: 'JTNET',\n  // },\n  // {\n  //   value: 'nice',\n  //   label: '나이스 정보통신',\n  // },\n  {\n    value: 'kakaopay',\n    label: '신 - 카카오페이',\n  }\n  // {\n  //   value: 'kakao',\n  //   label: '구 - LG CNS 카카오페이',\n  // },\n  // {\n  //   value: 'danal',\n  //   label: '다날 휴대폰 소액결제',\n  // },\n  // {\n  //   value: 'danal_tpay',\n  //   label: '다날 일반결제',\n  // },\n  // {\n  //   value: 'kicc',\n  //   label: '한국정보통신',\n  // },\n  // {\n  //   value: 'paypal',\n  //   label: '페이팔',\n  // },\n  // {\n  //   value: 'mobilians',\n  //   label: '모빌리언스',\n  // },\n  // {\n  //   value: 'payco',\n  //   label: '페이코',\n  // },\n  // {\n  //   value: 'settle',\n  //   label: '세틀뱅크 가상계좌',\n  // },\n  // {\n  //   value: 'naverco',\n  //   label: '네이버 체크아웃',\n  // },\n  // {\n  //   value: 'naverpay',\n  //   label: '네이버페이',\n  // },\n  // {\n  //   value: 'smilepay',\n  //   label: '스마일페이',\n  // },\n];\n\n\nexport const METHODS = [\n  {\n    value: 'card',\n    label: '신용카드',\n  },\n  {\n    value: 'vbank',\n    label: '가상계좌',\n  },\n  {\n    value: 'trans',\n    label: '실시간 계좌이체',\n  },\n  {\n    value: 'phone',\n    label: '휴대폰 소액결제'\n  },\n];\n\nexport const METHODS_FOR_INICIS =\n  METHODS.concat([\n    {\n      value: 'samsung',\n      label: '삼성페이',\n    },\n    {\n      value: 'kapy',\n      label: 'KPAY',\n    },\n    {\n      value: 'cultureland',\n      label: '문화상품권',\n    },\n    {\n      value: 'smartculture',\n      label: '스마트문상',\n    },\n    {\n      value: 'happymoney',\n      label: '해피머니',\n    },\n  ]);\n\nexport const METHODS_FOR_UPLUS =\n  METHODS.concat([\n    {\n      value: 'cultureland',\n      label: '문화상품권',\n    },\n    {\n      value: 'smartculture',\n      label: '스마트문상',\n    },\n    {\n      value: 'booknlife',\n      label: '도서상품권',\n    },\n  ]);\n\nexport const METHODS_FOR_KCP =\n  METHODS.concat([\n    {\n      value: 'samsung',\n      label: '삼성페이',\n    },\n  ]);\n\nexport const METHODS_FOR_MOBILIANS = [\n  {\n    value: 'card',\n    label: '신용카드',\n  },\n  {\n    value: 'phone',\n    label: '휴대폰 소액결제',\n  },\n];\n\nexport const METHODS_FOR_DANAL = [\n  {\n    value: 'card',\n    label: '신용카드',\n  },\n  {\n    value: 'vbank',\n    label: '가상계좌',\n  },\n  {\n    value: 'trans',\n    label: '실시간 계좌이체',\n  },\n];\n\nexport const METHOD_FOR_CARD = [\n  {\n    value: 'card',\n    label: '신용카드',\n  },\n];\n\nexport const METHOD_FOR_PHONE = [\n  {\n    value: 'phone',\n    label: '휴대폰 소액결제',\n  },\n];\n\nexport const METHOD_FOR_VBANK = [\n  {\n    value: 'vbank',\n    label: '가상계좌',\n  },\n];\n\nexport const QUOTAS = [\n  {\n    value: 0,\n    label: 'PG사 기본 제공',\n  },\n  {\n    value: 1,\n    label: '일시불',\n  },\n];\n\nexport const QUOTAS_FOR_INICIS_AND_KCP = [\n  {\n    value: 0,\n    label: 'PG사 기본 제공',\n  },\n  {\n    value: 1,\n    label: '일시불',\n  },\n  {\n    value: 2,\n    label: '2개월',\n  },\n  {\n    value: 3,\n    label: '3개월',\n  },\n  {\n    value: 4,\n    label: '4개월',\n  },\n  {\n    value: 5,\n    label: '5개월',\n  },\n  {\n    value: 6,\n    label: '6개월',\n  },\n];\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport { Form, Select, Icon, Input, Switch, Button } from 'antd';\nimport { withRouter } from 'react-router-dom';\nimport { withUserAgent } from 'react-useragent';\nimport queryString from 'query-string';\n\nimport {\n  PGS,\n  METHODS_FOR_INICIS,\n  QUOTAS_FOR_INICIS_AND_KCP,\n} from './constants';\nimport { getMethods, getQuotas } from './utils';\n\nconst { Item } = Form;\nconst { Option } = Select;\n\n\nclass PaymentAsClass extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state={\n      methods: METHODS_FOR_INICIS,\n      quatas: QUOTAS_FOR_INICIS_AND_KCP,\n      isQuotaRequired : true,\n      isDigitalRequired : false,\n      isVbankDueRequired : false,\n      isBizNumRequired : false,\n    }\n  }\n\n  handleSubmit=(e)=>{\n    e.preventDefault();\n    \n    this.props.form.validateFieldsAndScroll((error, values) => {\n      if (!error) {\n        /*this is the code that connect with PG*/\n        const userCode = 'imp23274934';\n     \n        const {\n          pg,\n          pay_method,\n          merchant_uid,\n          name,\n          amount,\n          buyer_name,\n          buyer_tel,\n          buyer_email,\n          escrow,\n          card_quota,\n          biz_num,\n          vbank_due,\n          digital,\n        } = values;\n\n        const data = {\n          pg,\n          pay_method,\n          merchant_uid,\n          name,\n          amount,\n          buyer_name,\n          buyer_tel,\n          buyer_email,\n          escrow,\n        };\n\n        // if (pay_method === 'vbank') {\n        //   data.vbank_due = vbank_due;\n        //   if (pg === 'danal_tpay') {\n        //     data.biz_num = biz_num;\n        //   }\n        // }\n        // if (pay_method === 'card') {\n        //   if (card_quota !== 0) {\n        //     data.digital = { card_quota: card_quota === 1 ? [] : card_quota };\n        //   }\n        // }\n        // if (pay_method === 'phone') {\n        //   data.digital = digital;\n        // }\n\n        if (this.isReactNative()) {\n          /* for react-native, this is the part that we using  */\n          const params = {\n            userCode,\n            data,\n            type: 'payment', \n          };\n          const paramsToString = JSON.stringify(params);\n          window.ReactNativeWebView.postMessage(paramsToString);\n        } else {\n          /* this is for web */\n          const { IMP } = window;\n          IMP.init(userCode);\n          IMP.request_pay(data, this.callback);\n        }\n      }\n    });\n  }\n\n  callback=(response)=> {\n    const query = queryString.stringify(response);\n    this.props.history.push(`/payment/result?${query}`);\n  }\n\n  onChangePg=(value)=> {\n    /* How to payment  */\n    const methods = getMethods(value);\n    this.setState({methods})\n    this.props.form.setFieldsValue({ pay_method: methods[0].value })\n\n    /* payment tiem */\n    const { pay_method } = this.props.form.getFieldsValue();\n    this.handleQuotas(value, pay_method);\n\n    /* donot care about this. this is for other purposes.*/\n    let isBizNumRequired = false;\n    let isVbankDueRequired = false;\n    if (pay_method === 'vbank') {\n      if (value === 'danal_tpay') {\n        isBizNumRequired = true;\n      }\n      isVbankDueRequired = true;\n    }\n    this.setState( {isBizNumRequired, isVbankDueRequired});\n  }\n\n\n  handleQuotas=(pg, pay_method)=>{\n    const { isQuotaRequired, quotas } = getQuotas(pg, pay_method);\n    this.setState({isQuotaRequired, quotas});\n\n    this.props.form.setFieldsValue({ card_quota: quotas[0].value })\n  }\n\n  //  onChangePayMethod=(value)=>{\n  //   const { pg } = this.props.getFieldsValue();\n  //   let isQuotaRequired = false;\n  //   let isDigitalRequired = false;\n  //   let isVbankDueRequired = false;\n  //   let isBizNumRequired = false;\n  //   switch (value) {\n  //     case 'card': {\n  //       isQuotaRequired = true;\n  //       break;\n  //     }\n  //     case 'phone': {\n  //       isDigitalRequired = true;\n  //       break;\n  //     }\n  //     case 'vbank': {\n  //       if (pg === 'danal_tpay') {\n  //         isBizNumRequired = true;\n  //       }\n  //       isVbankDueRequired = true;\n  //       break;\n  //     }\n  //     default:\n  //       break;\n  //   }\n  //   this.setState({isQuotaRequired,\n  //     isDigitalRequired,\n  //     isVbankDueRequired,\n  //     isBizNumRequired});\n\n  //   this.handleQuotas(pg, value);\n  // }\n\n  isReactNative=()=>{\n    /* check if it is reactive*/\n    if (this.props.ua.mobile) return true;\n    return false;\n  }\n\n  render(){\n\n    const { getFieldDecorator} = this.props.form;\n    return (\n      <Wrapper>\n        <Header>결제 진행하기</Header>\n        <FormContainer onSubmit={this.handleSubmit}>\n          <Item label=\"PG사\">\n            {getFieldDecorator('pg', {\n              initialValue: 'kakaopay',\n            })(\n              <Select\n                size=\"large\"\n                onChange={this.onChangePg}\n                suffixIcon={<Icon type=\"caret-down\" />}\n              >\n                {PGS.map(pg => {\n                  const { value, label } = pg;\n                  return <Option value={value} key={value}>{label}</Option>;\n                })}\n              </Select>\n            )}\n          </Item>\n          {/* <Item label=\"결제수단\">\n            {getFieldDecorator('pay_method', {\n              initialValue: 'card',\n            })(\n              <Select\n                size=\"large\"\n                onChange={this.onChangePayMethod}\n                suffixIcon={<Icon type=\"caret-down\" />}\n              >\n                {this.state.methods.map(method => {\n                  const { value, label } = method;\n                  return <Option value={value} key={value}>{label}</Option>;\n                })}\n              </Select>\n            )}\n          </Item> */}\n          {/* {this.state.isQuotaRequired && (\n            <Item label=\"할부개월수\">\n              {getFieldDecorator('card_quota', {\n                initialValue: 0,\n              })(\n                <Select size=\"large\" suffixIcon={<Icon type=\"caret-down\" />}>\n                  {this.state.quatas.map(quota => {\n                    const { value, label } = quota;\n                    return <Option value={value} key={value}>{label}</Option>;\n                  })}\n                </Select>\n              )}\n            </Item>\n          )} */}\n          {/* {this.state.isVbankDueRequired && (<Item>\n            {getFieldDecorator('vbank_due', {\n              rules: [{ required: true, message: '입금기한은 필수입력입니다' }],\n            })(\n              <Input size=\"large\" type=\"number\" addonBefore=\"입금기한\" placeholder=\"YYYYMMDDhhmm\" />,\n            )}\n          </Item>)}\n          {this.state.isBizNumRequired && (\n            <Item>\n              {getFieldDecorator('biz_num', {\n                rules: [{ required: true, message: '사업자번호는 필수입력입니다' }],\n              })(\n                <Input size=\"large\" type=\"number\" addonBefore=\"사업자번호\" />,\n              )}\n            </Item>\n          )} */}\n          {/* {this.state.isDigitalRequired && (\n            <Item label=\"실물여부\" className=\"toggle-container\">\n              {getFieldDecorator('digital', {\n                valuePropName: 'checked',\n              })(<Switch />)}\n            </Item>\n          )} */}\n          {/* <Item label=\"에스크로\" className=\"toggle-container\">\n            {getFieldDecorator('escrow', {\n              valuePropName: 'checked',\n            })(<Switch />)}\n          </Item> */}\n          <Item>\n            {getFieldDecorator('name', {\n              initialValue: 'The product name',\n              rules: [{ required: true, message: '주문명은 필수입력입니다' }],\n            })(\n              <Input size=\"large\" addonBefore=\"주문명\" />,\n            )}\n          </Item>\n          <Item>\n            {getFieldDecorator('amount', {\n              initialValue: '0',\n              rules: [{ required: true, message: '결제금액은 필수입력입니다' }],\n            })(\n              <Input size=\"large\" type=\"number\" addonBefore=\"결제금액\" />,\n            )}\n          </Item>\n          <Item>\n            {getFieldDecorator('merchant_uid', {\n              initialValue: `min_${new Date().getTime()}`,\n              rules: [{ required: true, message: '주문번호는 필수입력입니다' }],\n            })(\n              <Input size=\"large\" addonBefore=\"주문번호\" />,\n            )}\n          </Item>\n          <Item>\n            {getFieldDecorator('buyer_name', {\n              initialValue: '홍길동',\n              rules: [{ required: true, message: '구매자 이름은 필수입력입니다' }],\n            })(\n              <Input size=\"large\" addonBefore=\"이름\" />,\n            )}\n          </Item>\n          <Item>\n            {getFieldDecorator('buyer_tel', {\n              initialValue: '01012341234',\n              rules: [{ required: true, message: '구매자 전화번호는 필수입력입니다' }],\n            })(\n              <Input size=\"large\" type=\"number\" addonBefore=\"전화번호\" />,\n            )}\n          </Item>\n          <Item>\n            {getFieldDecorator('buyer_email', {\n              initialValue: 'example@example.com',\n              rules: [{ required: true, message: '구매자 이메일은 필수입력입니다' }],\n            })(\n              <Input size=\"large\" addonBefore=\"이메일\" />,\n            )}\n          </Item>\n          <Button type=\"primary\" htmlType=\"submit\" size=\"large\">\n            결제하기\n          </Button>\n        </FormContainer>\n      </Wrapper>\n    );\n  }\n}\n\nconst Wrapper = styled.div`\n  padding: 5rem 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n`;\n\nconst Header = styled.div`\n  font-weight: bold;\n  text-align: center;\n  padding: 2rem;\n  padding-top: 0;\n  font-size: 3rem;\n`;\n\nconst FormContainer = styled(Form)`\n  width: 350px;\n  border-radius: 3px;\n\n  .ant-row {\n    margin-bottom: 1rem;\n  }\n  .ant-form-item {\n    display: flex;\n    align-items: center;\n  }\n  .ant-col.ant-form-item-label {\n    padding: 0 11px;\n    width: 9rem;\n    text-align: left;\n    label {\n      color: #888;\n      font-size: 1.2rem;\n    }\n    & + .ant-col.ant-form-item-control-wrapper {\n      width: 26rem;\n      .ant-form-item-control {\n        line-height: inherit;\n      }\n    }\n  }\n  .ant-col.ant-form-item-label > label::after {\n    display: none;\n  }\n  .ant-row.ant-form-item.toggle-container .ant-form-item-control {\n    padding: 0 11px;\n    height: 4rem;\n    display: flex;\n    align-items: center;\n    .ant-switch {\n      margin: 0;\n    }\n  }\n\n  .ant-form-explain {\n    margin-top: 0.5rem;\n    margin-left: 9rem;\n  }\n\n  .ant-input-group-addon:first-child {\n    width: 9rem;\n    text-align: left;\n    color: #888;\n    font-size: 1.2rem;\n    border: none;\n    background-color: inherit;\n  }\n  .ant-input-group > .ant-input:last-child {\n    border-radius: 4px;\n  }\n\n  .ant-col {\n    width: 100%;\n  }\n\n  button[type='submit'] {\n    width: 100%;\n    height: 5rem;\n    font-size: 1.6rem;\n    margin-top: 2rem;\n  }\n`;\n\n\nconst PaymentForm = Form.create({ name: 'payment' })(PaymentAsClass);\n\nexport default withUserAgent(withRouter(PaymentForm));\n","import {\n  METHODS,\n  METHOD_FOR_CARD,\n  METHOD_FOR_PHONE,\n  METHOD_FOR_VBANK,\n  METHODS_FOR_INICIS,\n  METHODS_FOR_UPLUS,\n  METHODS_FOR_KCP,\n  METHODS_FOR_MOBILIANS,\n  METHODS_FOR_DANAL,\n  QUOTAS,\n  QUOTAS_FOR_INICIS_AND_KCP,\n} from './constants';\n\nexport function getMethods(pg) {\n  switch (pg) {\n    case 'html5_inicis': return METHODS_FOR_INICIS;\n    case 'kcp': return METHODS_FOR_KCP;\n    case 'uplus': return METHODS_FOR_UPLUS;\n    case 'kcp_billing':\n    case 'kakaopay':\n    case 'kakao':\n    case 'paypal':\n    case 'smilepay':\n      return METHOD_FOR_CARD;\n    case 'danal':\n      return METHOD_FOR_PHONE;\n    case 'danal_tpay':\n      return METHODS_FOR_DANAL;\n    case 'mobilians':\n      return METHODS_FOR_MOBILIANS;\n    case 'settle':\n      return METHOD_FOR_VBANK;\n    default: return METHODS;\n  }  \n} \n\nexport function getQuotas(pg, method) {\n  if (method === 'card') {\n    switch (pg) {\n      case 'html5_inicis':\n      case 'kcp':\n        return { isQuotaRequired: true, quotas: QUOTAS_FOR_INICIS_AND_KCP };\n      default:\n        return { isQuotaRequired: true, quotas: QUOTAS };\n    }\n  }\n  return { isQuotaRequired: false, quotas: QUOTAS };\n}","import React from 'react';\nimport styled from 'styled-components';\nimport { Icon, Button } from 'antd';\nimport { withRouter } from 'react-router-dom';\nimport queryString from 'query-string';\n\nfunction PaymentResult({ history }) {\n  const { location } = history;\n  const { search } = location;\n  const query = queryString.parse(search);\n  \n  const { merchant_uid, error_msg, imp_uid } = query;\n  const isSuccessed = getIsSuccessed();\n  function getIsSuccessed() {\n    const { success, imp_success } = query;\n    if (typeof imp_success === 'string') return imp_success === 'true';\n    if (typeof imp_success === 'boolean') return imp_success === true;\n    if (typeof success === 'string') return success === 'true';\n    if (typeof success === 'boolean') return success === true;\n  }\n\n  const iconType = isSuccessed ? 'check-circle' : 'exclamation-circle';\n  const resultType = isSuccessed ? '성공' : '실패';\n  const colorType = isSuccessed ? '#52c41a' : '#f5222d';\n  return (\n    <Wrapper>\n      <Container colorType={colorType}>\n        <Icon type={iconType} theme=\"filled\" />\n        <p>{`결제에 ${resultType}하였습니다`}</p>\n        <ul>\n          <li>\n            <span>주문번호</span>\n            <span>{merchant_uid}</span>\n          </li>\n          {isSuccessed  ? (\n            <li>\n              <span>아임포트 번호</span>\n              <span>{imp_uid}</span>\n            </li>\n          ) : (\n            <li>\n              <span>에러 메시지</span>\n              <span>{error_msg}</span>\n            </li>\n          )}\n        </ul>\n        <Button size=\"large\" onClick={() => history.push('/')}>\n          <Icon type=\"arrow-left\" />\n          돌아가기\n        </Button>\n      </Container>\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  background-color: #fff;\n  border-radius: 4px;\n  position: absolute;\n  top: 2rem;\n  left: 2rem;\n  right: 2rem;\n  bottom: 2rem;\n  padding: 2rem;\n\n  > .anticon {\n    font-size: 10rem;\n    text-align: center;\n    margin-bottom: 2rem;\n    color: ${props => props.colorType};\n  }\n  p {\n    font-size: 2rem;\n    font-weight: bold;\n    margin-bottom: 2rem;\n  }\n\n  ul {\n    list-style: none;\n    padding: 0;\n    margin-bottom: 3rem;\n\n    li {\n      display: flex;\n      line-height: 2;\n      span:first-child {\n        width: 8rem;\n        color: #888;\n      }\n      span:last-child {\n        width: calc(100% - 8rem);\n        color: #333;\n      }\n    }\n  }\n\n  button, button:hover {\n    border-color: ${props => props.colorType};\n    color: ${props => props.colorType};\n  }\n  button:hover {\n    opacity: 0.7;\n  }\n`;\n\nexport default withRouter(PaymentResult);","import React from 'react';\nimport styled from 'styled-components';\nimport { Form, Input, Button } from 'antd';\nimport { withRouter } from 'react-router-dom';\nimport { withUserAgent } from 'react-useragent';\nimport queryString from 'query-string';\n\nconst { Item } = Form;\n\nfunction Certification({ history, form, ua }) {\n  const { getFieldDecorator, validateFieldsAndScroll } = form;\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    \n    validateFieldsAndScroll((error, values) => {\n      if (!error) {\n        /* 가맹점 식별코드 */\n        const userCode = 'imp10391932';\n        /* 결제 데이터 */\n        const {\n          merchant_uid,\n          name,\n          phone,\n          min_age,\n        } = values;\n\n        const data = {\n          merchant_uid,\n        };\n\n        if (name) {\n          data.name = name;\n        }\n        if (phone) {\n          data.phone = phone;\n        }\n        if (min_age) {\n          data.min_age = min_age;\n        }\n\n        if (isReactNative()) {\n          /* 리액트 네이티브 환경일때 */\n          const params = {\n            userCode,\n            data,\n            type: 'certification', // 결제와 본인인증을 구분하기 위한 필드\n          };\n          const paramsToString = JSON.stringify(params);\n          window.ReactNativeWebView.postMessage(paramsToString);\n        } else {\n          /* 웹 환경일때 */\n          const { IMP } = window;\n          IMP.init(userCode);\n          IMP.certification(data, callback);\n        }\n      }\n    });\n  }\n\n  /* 본인인증 후 콜백함수 */\n  function callback(response) {\n    const query = queryString.stringify(response);\n    history.push(`/certification/result?${query}`);\n  }\n\n  function isReactNative() {\n    /*\n      리액트 네이티브 환경인지 여부를 판단해\n      리액트 네이티브의 경우 IMP.certification()을 호출하는 대신\n      iamport-react-native 모듈로 post message를 보낸다\n\n      아래 예시는 모든 모바일 환경을 리액트 네이티브로 인식한 것으로\n      실제로는 user agent에 값을 추가해 정확히 판단해야 한다\n    */\n    if (ua.mobile) return true;\n    return false;\n  }\n\n  return (\n    <Wrapper>\n      <Header>아임포트 본인인증 테스트</Header>\n      <FormContainer onSubmit={handleSubmit}>\n        <Item>\n          {getFieldDecorator('merchant_uid', {\n            initialValue: `min_${new Date().getTime()}`,\n            rules: [{ required: true, message: '주문번호는 필수입력입니다' }],\n          })(\n            <Input size=\"large\" addonBefore=\"주문번호\" />,\n          )}\n        </Item>\n        <Item>\n          {getFieldDecorator('name')(\n            <Input size=\"large\" addonBefore=\"이름\" />,\n          )}\n        </Item>\n        <Item>\n          {getFieldDecorator('phone')(\n            <Input size=\"large\" type=\"number\" addonBefore=\"전화번호\" />,\n          )}\n        </Item>\n        <Item>\n          {getFieldDecorator('min_age')(\n            <Input\n              size=\"large\"\n              type=\"number\"\n              addonBefore=\"최소연령\"\n              placeholder=\"허용 최소 만 나이\"\n            />,\n          )}\n        </Item>\n        <Button type=\"primary\" htmlType=\"submit\" size=\"large\">\n          본인인증하기\n        </Button>\n      </FormContainer>\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.div`\n  padding: 7rem 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n`;\n\nconst Header = styled.div`\n  font-weight: bold;\n  text-align: center;\n  padding: 2rem;\n  padding-top: 0;\n  font-size: 3rem;\n`;\n\nconst FormContainer = styled(Form)`\n  width: 350px;\n  border-radius: 3px;\n\n  .ant-row {\n    margin-bottom: 1rem;\n  }\n  .ant-form-item {\n    display: flex;\n    align-items: center;\n  }\n  .ant-col.ant-form-item-label > label::after {\n    display: none;\n  }\n\n  .ant-form-explain {\n    margin-top: 0.5rem;\n    margin-left: 9rem;\n  }\n\n  .ant-input-group-addon:first-child {\n    width: 9rem;\n    text-align: left;\n    color: #888;\n    font-size: 1.2rem;\n    border: none;\n    background-color: inherit;\n  }\n  .ant-input-group > .ant-input:last-child {\n    border-radius: 4px;\n  }\n\n  .ant-col {\n    width: 100%;\n  }\n\n  button[type='submit'] {\n    width: 100%;\n    height: 5rem;\n    font-size: 1.6rem;\n    margin-top: 2rem;\n  }\n`;\n\nconst CertificationForm = Form.create({ name: 'certification' })(Certification);\n\nexport default withUserAgent(withRouter(CertificationForm));\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Icon, Button } from 'antd';\nimport { withRouter } from 'react-router-dom';\nimport queryString from 'query-string';\n\nfunction CertificationResult({ history }) {\n  const { location } = history;\n  const { search } = location;\n  const query = queryString.parse(search);\n\n  const { merchant_uid, error_msg, imp_uid } = query;\n  const isSuccessed = getIsSuccessed();\n  function getIsSuccessed() {\n    const { success, } = query;\n    if (typeof success === 'string') return success === 'true';\n    if (typeof success === 'boolean') return success === true;\n  }\n\n  const iconType = isSuccessed ? 'check-circle' : 'exclamation-circle';\n  const resultType = isSuccessed ? '성공' : '실패';\n  const colorType = isSuccessed ? '#52c41a' : '#f5222d';\n  return (\n    <Wrapper>\n      <Container colorType={colorType}>\n        <Icon type={iconType} theme=\"filled\" />\n        <p>{`본인인증에 ${resultType}하였습니다`}</p>\n        <ul>\n          <li>\n            <span>주문번호</span>\n            <span>{merchant_uid}</span>\n          </li>\n          {isSuccessed  ? (\n            <li>\n              <span>아임포트 번호</span>\n              <span>{imp_uid}</span>\n            </li>\n          ) : (\n            <li>\n              <span>에러 메시지</span>\n              <span>{error_msg}</span>\n            </li>\n          )}\n        </ul>\n        <Button size=\"large\" onClick={() => history.push('/')}>\n          <Icon type=\"arrow-left\" />\n          돌아가기\n        </Button>\n      </Container>\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  background-color: #fff;\n  border-radius: 4px;\n  position: absolute;\n  top: 2rem;\n  left: 2rem;\n  right: 2rem;\n  bottom: 2rem;\n  padding: 2rem;\n\n  > .anticon {\n    font-size: 10rem;\n    text-align: center;\n    margin-bottom: 2rem;\n    color: ${props => props.colorType};\n  }\n  p {\n    font-size: 2rem;\n    font-weight: bold;\n    margin-bottom: 2rem;\n  }\n\n  ul {\n    list-style: none;\n    padding: 0;\n    margin-bottom: 3rem;\n\n    li {\n      display: flex;\n      line-height: 2;\n      span:first-child {\n        width: 8rem;\n        color: #888;\n      }\n      span:last-child {\n        width: calc(100% - 8rem);\n        color: #333;\n      }\n    }\n  }\n\n  button, button:hover {\n    border-color: ${props => props.colorType};\n    color: ${props => props.colorType};\n  }\n  button:hover {\n    opacity: 0.7;\n  }\n`;\n\nexport default withRouter(CertificationResult);","import React from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\n\nimport Home from './Home';\nimport Payment from './Payment';\nimport PaymentResult from './PaymentResult';\nimport Certification from './Certification';\nimport CertificationResult from './CertificationResult';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Route exact path=\"/\" component={Payment} />\n      <Route exact path=\"/payment\" component={Payment} />\n      <Route exact path=\"/payment/result\" component={PaymentResult} />\n      {/* <Route exact path=\"/certification\" component={Certification} />\n      <Route exact path=\"/certification/result\" component={CertificationResult} /> */}\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}